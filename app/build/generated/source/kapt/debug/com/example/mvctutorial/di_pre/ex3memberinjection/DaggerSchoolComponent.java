// Generated by Dagger (https://dagger.dev).
package com.example.mvctutorial.di_pre.ex3memberinjection;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSchoolComponent implements SchoolComponent {
  private final PersonModule personModule;

  private final DaggerSchoolComponent schoolComponent = this;

  private DaggerSchoolComponent(PersonModule personModuleParam) {
    this.personModule = personModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  public static SchoolComponent create() {
    return new Builder().build();
  }

  @Override
  public void injectStudent(Student student) {
    injectStudent2(student);
  }

  @Override
  public void injectTeacher(Teacher teacher) {
    injectTeacher2(teacher);
  }

  private Student injectStudent2(Student instance) {
    Student_MembersInjector.injectName(instance, PersonModule_ProvidesStringFactory.providesString(personModule));
    return instance;
  }

  private Teacher injectTeacher2(Teacher instance) {
    Teacher_MembersInjector.injectSetTeacherName(instance, PersonModule_ProvidesStringFactory.providesString(personModule));
    return instance;
  }

  public static final class Builder {
    private PersonModule personModule;

    private Builder() {
    }

    public Builder personModule(PersonModule personModule) {
      this.personModule = Preconditions.checkNotNull(personModule);
      return this;
    }

    public SchoolComponent build() {
      if (personModule == null) {
        this.personModule = new PersonModule();
      }
      return new DaggerSchoolComponent(personModule);
    }
  }
}
