// Generated by Dagger (https://dagger.dev).
package com.example.mvctutorial.di_pre.ex6bindinstance;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesApplicationFactory implements Factory<Application> {
  private final AppModule module;

  private final Provider<String> nameProvider;

  public AppModule_ProvidesApplicationFactory(AppModule module, Provider<String> nameProvider) {
    this.module = module;
    this.nameProvider = nameProvider;
  }

  @Override
  public Application get() {
    return providesApplication(module, nameProvider.get());
  }

  public static AppModule_ProvidesApplicationFactory create(AppModule module,
      Provider<String> nameProvider) {
    return new AppModule_ProvidesApplicationFactory(module, nameProvider);
  }

  public static Application providesApplication(AppModule instance, String name) {
    return Preconditions.checkNotNullFromProvides(instance.providesApplication(name));
  }
}
